from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase
from typing import Optional
import logging


logger = logging.getLogger(__name__)


class MongoManager:
    def __init__(self, mongo_url: str, db_name: str, max_pool_size: int = 100):
        self._mongo_url = mongo_url
        self._db_name = db_name
        self._max_pool_size = max_pool_size
        self._client: Optional[AsyncIOMotorClient] = None
        self._db: Optional[AsyncIOMotorDatabase] = None

    async def connect(self) -> None:
        if self._client is None:
            self._client = AsyncIOMotorClient(
                self._mongo_url,
                maxPoolSize=self._max_pool_size,
                serverSelectionTimeoutMS=5000,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 5 —Å–µ–∫
                connect=False,
            )
            self._db = self._client[self._db_name]
            try:
                await self._db.command("ping")
                logger.info(f"‚úÖ MongoDB connected to {self._db_name}")
            except Exception as e:
                await self.close()
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Mongo")
                raise ConnectionError(f"MongoDB connection failed: {e}")

    async def close(self) -> None:
        if self._client:
            self._client.close()
            self._client = None
            self._db = None
            logger.info("üö™ MongoDB connection closed")

    async def get_mongodb(self) -> AsyncIOMotorDatabase:
        if self._db is None:
            logger.info("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π Mongo (connect=False), –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è")
            await self.connect()
        try:
            return self._db
        except Exception as e:
            logger.error(f"‚ö†Ô∏è MongoDB error: {e}")
            raise

    async def aggregate(self, collection: str, pipeline: list) -> list:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        db = await self.get_mongodb()
        cursor = db[collection].aggregate(pipeline)
        return await cursor.to_list(length=10000)
